from typing import (
    List,
    Optional,
    Tuple,
    Union,
)

from _typeshed import Incomplete

__all__ = ["ParentedTree", "MultiParentedTree"]

class AbstractParentedTree:
    def __init__(
        self,
        node: str,
        children: Optional[List[Union[str, ParentedTree]]] = ...,
    ) -> None: ...

class ParentedTree:
    def __init__(
        self,
        node: str,
        children: Optional[List[Union[str, ParentedTree]]] = ...,
    ) -> None: ...
    def _setparent(
        self, child: ParentedTree, index: int, dry_run: bool = ...
    ) -> Incomplete: ...
    def left_sibling(self) -> ParentedTree: ...
    def parent(self) -> Optional[ParentedTree]: ...
    def parent_index(self) -> int: ...
    def right_sibling(self) -> ParentedTree: ...
    def root(self) -> ParentedTree: ...
    def treeposition(
        self,
    ) -> Union[
        Tuple[int, int, int, int],
        Tuple[int, int],
        Tuple[int, int, int],
        Tuple[int],
    ]: ...

class MultiParentedTree(AbstractParentedTree):
    def __init__(
        self, node: Incomplete, children: Incomplete | None = None
    ) -> None: ...
    def parents(self) -> Incomplete: ...
    def left_siblings(self) -> Incomplete: ...
    def right_siblings(self) -> Incomplete: ...
    def roots(self) -> Incomplete: ...
    def parent_indices(self, parent: Incomplete) -> Incomplete: ...
    def treepositions(self, root: Incomplete) -> Incomplete: ...
