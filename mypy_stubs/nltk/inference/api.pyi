import threading
from abc import ABCMeta, abstractmethod

from _typeshed import Incomplete

class Prover(metaclass=ABCMeta):
    def prove(
        self,
        goal: Incomplete | None = None,
        assumptions: Incomplete | None = None,
        verbose: bool = False,
    ) -> Incomplete: ...

class ModelBuilder(metaclass=ABCMeta):
    def build_model(
        self,
        goal: Incomplete | None = None,
        assumptions: Incomplete | None = None,
        verbose: bool = False,
    ) -> Incomplete: ...

class TheoremToolCommand(metaclass=ABCMeta):
    @abstractmethod
    def add_assumptions(self, new_assumptions: Incomplete) -> Incomplete: ...
    @abstractmethod
    def retract_assumptions(
        self, retracted: Incomplete, debug: bool = False
    ) -> Incomplete: ...
    @abstractmethod
    def assumptions(self) -> Incomplete: ...
    @abstractmethod
    def goal(self) -> Incomplete: ...
    @abstractmethod
    def print_assumptions(self) -> Incomplete: ...

class ProverCommand(TheoremToolCommand):
    @abstractmethod
    def prove(self, verbose: bool = False) -> Incomplete: ...
    @abstractmethod
    def proof(self, simplify: bool = True) -> Incomplete: ...
    @abstractmethod
    def get_prover(self) -> Incomplete: ...

class ModelBuilderCommand(TheoremToolCommand):
    @abstractmethod
    def build_model(self, verbose: bool = False) -> Incomplete: ...
    @abstractmethod
    def model(self, format: Incomplete | None = None) -> Incomplete: ...
    @abstractmethod
    def get_model_builder(self) -> Incomplete: ...

class BaseTheoremToolCommand(TheoremToolCommand):
    def __init__(
        self,
        goal: Incomplete | None = None,
        assumptions: Incomplete | None = None,
    ) -> None: ...
    def add_assumptions(self, new_assumptions: Incomplete) -> None: ...
    def retract_assumptions(
        self, retracted: Incomplete, debug: bool = False
    ) -> Incomplete: ...
    def assumptions(self) -> Incomplete: ...
    def goal(self) -> Incomplete: ...
    def print_assumptions(self) -> None: ...

class BaseProverCommand(BaseTheoremToolCommand, ProverCommand):
    def __init__(
        self,
        prover: Incomplete,
        goal: Incomplete | None = None,
        assumptions: Incomplete | None = None,
    ) -> None: ...
    def prove(self, verbose: bool = False) -> Incomplete: ...
    def proof(self, simplify: bool = True) -> Incomplete: ...
    def decorate_proof(
        self, proof_string: Incomplete, simplify: bool = True
    ) -> Incomplete: ...
    def get_prover(self) -> Incomplete: ...

class BaseModelBuilderCommand(BaseTheoremToolCommand, ModelBuilderCommand):
    def __init__(
        self,
        modelbuilder: Incomplete,
        goal: Incomplete | None = None,
        assumptions: Incomplete | None = None,
    ) -> None: ...
    def build_model(self, verbose: bool = False) -> Incomplete: ...
    def model(self, format: Incomplete | None = None) -> Incomplete: ...
    def get_model_builder(self) -> Incomplete: ...

class TheoremToolCommandDecorator(TheoremToolCommand):
    def __init__(self, command: Incomplete) -> None: ...
    def assumptions(self) -> Incomplete: ...
    def goal(self) -> Incomplete: ...
    def add_assumptions(self, new_assumptions: Incomplete) -> None: ...
    def retract_assumptions(
        self, retracted: Incomplete, debug: bool = False
    ) -> None: ...
    def print_assumptions(self) -> None: ...

class ProverCommandDecorator(TheoremToolCommandDecorator, ProverCommand):
    def __init__(self, proverCommand: Incomplete) -> None: ...
    def prove(self, verbose: bool = False) -> Incomplete: ...
    def proof(self, simplify: bool = True) -> Incomplete: ...
    def decorate_proof(
        self, proof_string: Incomplete, simplify: bool = True
    ) -> Incomplete: ...
    def get_prover(self) -> Incomplete: ...

class ModelBuilderCommandDecorator(
    TheoremToolCommandDecorator, ModelBuilderCommand
):
    def __init__(self, modelBuilderCommand: Incomplete) -> None: ...
    def build_model(self, verbose: bool = False) -> Incomplete: ...
    def model(self, format: Incomplete | None = None) -> Incomplete: ...
    def get_model_builder(self) -> Incomplete: ...

class ParallelProverBuilder(Prover, ModelBuilder):
    def __init__(
        self, prover: Incomplete, modelbuilder: Incomplete
    ) -> None: ...

class ParallelProverBuilderCommand(BaseProverCommand, BaseModelBuilderCommand):
    def __init__(
        self,
        prover: Incomplete,
        modelbuilder: Incomplete,
        goal: Incomplete | None = None,
        assumptions: Incomplete | None = None,
    ) -> None: ...
    def prove(self, verbose: bool = False) -> Incomplete: ...
    def build_model(self, verbose: bool = False) -> Incomplete: ...

class TheoremToolThread(threading.Thread):
    def __init__(
        self,
        command: Incomplete,
        verbose: Incomplete,
        name: Incomplete | None = None,
    ) -> None: ...
    def run(self) -> None: ...
    @property
    def result(self) -> Incomplete: ...
