from abc import ABCMeta, abstractmethod

from _typeshed import Incomplete

from nltk import jsontags as jsontags

class TagRule(metaclass=ABCMeta):
    original_tag: Incomplete
    replacement_tag: Incomplete
    def __init__(
        self, original_tag: Incomplete, replacement_tag: Incomplete
    ) -> None: ...
    def apply(
        self, tokens: Incomplete, positions: Incomplete | None = None
    ) -> Incomplete: ...
    @abstractmethod
    def applies(self, tokens: Incomplete, index: Incomplete) -> Incomplete: ...
    def __eq__(self, other: Incomplete) -> Incomplete: ...
    def __ne__(self, other: Incomplete) -> Incomplete: ...
    def __hash__(self) -> Incomplete: ...

class Rule(TagRule):
    json_tag: str
    templateid: Incomplete
    def __init__(
        self,
        templateid: Incomplete,
        original_tag: Incomplete,
        replacement_tag: Incomplete,
        conditions: Incomplete,
    ) -> None: ...
    def encode_json_obj(self) -> Incomplete: ...
    @classmethod
    def decode_json_obj(cls: Incomplete, obj: Incomplete) -> Incomplete: ...
    def applies(self, tokens: Incomplete, index: Incomplete) -> Incomplete: ...
    def __eq__(self, other: Incomplete) -> Incomplete: ...
    def __ne__(self, other: Incomplete) -> Incomplete: ...
    def __hash__(self) -> Incomplete: ...
    def format(self, fmt: Incomplete) -> Incomplete: ...
