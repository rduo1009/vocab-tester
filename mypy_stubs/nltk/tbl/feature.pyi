from abc import ABCMeta, abstractmethod

from _typeshed import Incomplete

class Feature(metaclass=ABCMeta):
    json_tag: str
    PROPERTY_NAME: Incomplete
    positions: Incomplete
    def __init__(
        self, positions: Incomplete, end: Incomplete | None = None
    ) -> None: ...
    def encode_json_obj(self) -> Incomplete: ...
    @classmethod
    def decode_json_obj(cls: Incomplete, obj: Incomplete) -> Incomplete: ...
    @classmethod
    def expand(
        cls: Incomplete,
        starts: Incomplete,
        winlens: Incomplete,
        excludezero: bool = False,
    ) -> Incomplete: ...
    def issuperset(self, other: Incomplete) -> Incomplete: ...
    def intersects(self, other: Incomplete) -> Incomplete: ...
    def __eq__(self, other: Incomplete) -> Incomplete: ...
    def __lt__(self, other: Incomplete) -> Incomplete: ...
    def __ne__(self, other: Incomplete) -> Incomplete: ...
    def __gt__(self, other: Incomplete) -> Incomplete: ...
    def __ge__(self, other: Incomplete) -> Incomplete: ...
    def __le__(self, other: Incomplete) -> Incomplete: ...
    @staticmethod
    @abstractmethod
    def extract_property(
        tokens: Incomplete, index: Incomplete
    ) -> Incomplete: ...
