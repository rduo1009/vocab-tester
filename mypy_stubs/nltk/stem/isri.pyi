from _typeshed import Incomplete

from nltk.stem.api import StemmerI as StemmerI

class ISRIStemmer(StemmerI):
    p3: Incomplete
    p2: Incomplete
    p1: Incomplete
    s3: Incomplete
    s2: Incomplete
    s1: Incomplete
    pr4: Incomplete
    pr53: Incomplete
    re_short_vowels: Incomplete
    re_hamza: Incomplete
    re_initial_hamza: Incomplete
    stop_words: Incomplete
    def __init__(self) -> None: ...
    def stem(self, token: Incomplete) -> Incomplete: ...
    def norm(self, word: Incomplete, num: int = 3) -> Incomplete: ...
    def pre32(self, word: Incomplete) -> Incomplete: ...
    def suf32(self, word: Incomplete) -> Incomplete: ...
    def waw(self, word: Incomplete) -> Incomplete: ...
    def pro_w4(self, word: Incomplete) -> Incomplete: ...
    def pro_w53(self, word: Incomplete) -> Incomplete: ...
    def pro_w54(self, word: Incomplete) -> Incomplete: ...
    def end_w5(self, word: Incomplete) -> Incomplete: ...
    def pro_w6(self, word: Incomplete) -> Incomplete: ...
    def pro_w64(self, word: Incomplete) -> Incomplete: ...
    def end_w6(self, word: Incomplete) -> Incomplete: ...
    def suf1(self, word: Incomplete) -> Incomplete: ...
    def pre1(self, word: Incomplete) -> Incomplete: ...
