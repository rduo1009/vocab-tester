from collections.abc import Generator

from _typeshed import Incomplete

from nltk.classify import Senna as Senna

class SennaTagger(Senna):
    def __init__(self, path: Incomplete, encoding: str = "utf-8") -> None: ...
    def tag_sents(self, sentences: Incomplete) -> Incomplete: ...

class SennaChunkTagger(Senna):
    def __init__(self, path: Incomplete, encoding: str = "utf-8") -> None: ...
    def tag_sents(self, sentences: Incomplete) -> Incomplete: ...
    def bio_to_chunks(
        self, tagged_sent: Incomplete, chunk_type: Incomplete
    ) -> Generator[Incomplete, None, None]: ...

class SennaNERTagger(Senna):
    def __init__(self, path: Incomplete, encoding: str = "utf-8") -> None: ...
    def tag_sents(self, sentences: Incomplete) -> Incomplete: ...
