from collections.abc import Generator
from operator import itemgetter as itemgetter

from _typeshed import Incomplete

from nltk.corpus.reader import (
    XMLCorpusReader as XMLCorpusReader,
)
from nltk.corpus.reader import (
    XMLCorpusView as XMLCorpusView,
)
from nltk.util import (
    LazyConcatenation as LazyConcatenation,
)
from nltk.util import (
    LazyIteratorList as LazyIteratorList,
)
from nltk.util import (
    LazyMap as LazyMap,
)

__docformat__: str

def mimic_wrap(
    lines: Incomplete, wrap_at: int = 65, **kwargs: Incomplete
) -> Generator[Incomplete, None, None]: ...

class FramenetError(Exception): ...

class AttrDict(dict):  # type: ignore[type-arg]
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def __setattr__(self, name: Incomplete, value: Incomplete) -> None: ...
    def __getattr__(self, name: Incomplete) -> Incomplete: ...
    def __getitem__(self, name: Incomplete) -> Incomplete: ...

class SpecialList(list):  # type: ignore[type-arg]
    def __init__(
        self, typ: Incomplete, *args: Incomplete, **kwargs: Incomplete
    ) -> None: ...

class Future:
    def __init__(
        self, loader: Incomplete, *args: Incomplete, **kwargs: Incomplete
    ) -> None: ...
    def __nonzero__(self) -> Incomplete: ...
    def __len__(self) -> int: ...
    def __setitem__(self, key: Incomplete, value: Incomplete) -> None: ...
    def __getitem__(self, key: Incomplete) -> Incomplete: ...
    def __getattr__(self, key: Incomplete) -> Incomplete: ...

class PrettyDict(AttrDict):
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...

class PrettyList(list):
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...

class PrettyLazyMap(LazyMap): ...
class PrettyLazyIteratorList(LazyIteratorList): ...

class PrettyLazyConcatenation(LazyConcatenation):
    def __add__(self, other: Incomplete) -> Incomplete: ...
    def __radd__(self, other: Incomplete) -> Incomplete: ...

class FramenetCorpusReader(XMLCorpusReader):
    def warnings(self, v: Incomplete) -> None: ...
    def __init__(self, root: Incomplete, fileids: Incomplete) -> None: ...
    def help(self, attrname: Incomplete | None = None) -> Incomplete: ...
    def buildindexes(self) -> None: ...
    def doc(self, fn_docid: Incomplete) -> Incomplete: ...
    def frame_by_id(
        self, fn_fid: Incomplete, ignorekeys: Incomplete = []
    ) -> Incomplete: ...
    def frame_by_name(
        self,
        fn_fname: Incomplete,
        ignorekeys: Incomplete = [],
        check_cache: bool = True,
    ) -> Incomplete: ...
    def frame(
        self, fn_fid_or_fname: Incomplete, ignorekeys: Incomplete = []
    ) -> Incomplete: ...
    def frames_by_lemma(self, pat: Incomplete) -> Incomplete: ...
    def lu_basic(self, fn_luid: Incomplete) -> Incomplete: ...
    def lu(
        self,
        fn_luid: Incomplete,
        ignorekeys: Incomplete = [],
        luName: Incomplete | None = None,
        frameID: Incomplete | None = None,
        frameName: Incomplete | None = None,
    ) -> Incomplete: ...
    def propagate_semtypes(self) -> None: ...
    def semtype(self, key: Incomplete) -> Incomplete: ...
    def semtype_inherits(
        self, st: Incomplete, superST: Incomplete
    ) -> Incomplete: ...
    def frames(self, name: Incomplete | None = None) -> Incomplete: ...
    def frame_ids_and_names(
        self, name: Incomplete | None = None
    ) -> Incomplete: ...
    def fes(
        self, name: Incomplete | None = None, frame: Incomplete | None = None
    ) -> Incomplete: ...
    def lus(
        self, name: Incomplete | None = None, frame: Incomplete | None = None
    ) -> Incomplete: ...
    def lu_ids_and_names(
        self, name: Incomplete | None = None
    ) -> Incomplete: ...
    def docs_metadata(self, name: Incomplete | None = None) -> Incomplete: ...
    def docs(self, name: Incomplete | None = None) -> Incomplete: ...
    def sents(
        self, exemplars: bool = True, full_text: bool = True
    ) -> Incomplete: ...
    def annotations(
        self,
        luNamePattern: Incomplete | None = None,
        exemplars: bool = True,
        full_text: bool = True,
    ) -> Incomplete: ...
    def exemplars(
        self,
        luNamePattern: Incomplete | None = None,
        frame: Incomplete | None = None,
        fe: Incomplete | None = None,
        fe2: Incomplete | None = None,
    ) -> Incomplete: ...
    def ft_sents(
        self, docNamePattern: Incomplete | None = None
    ) -> Incomplete: ...
    def frame_relation_types(self) -> Incomplete: ...
    def frame_relations(
        self,
        frame: Incomplete | None = None,
        frame2: Incomplete | None = None,
        type: Incomplete | None = None,
    ) -> Incomplete: ...
    def fe_relations(self) -> Incomplete: ...
    def semtypes(self) -> Incomplete: ...

def demo() -> None: ...
