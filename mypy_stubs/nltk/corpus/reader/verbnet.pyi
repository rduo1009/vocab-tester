from _typeshed import Incomplete

from nltk.corpus.reader.xmldocs import XMLCorpusReader as XMLCorpusReader

class VerbnetCorpusReader(XMLCorpusReader):
    def __init__(
        self, root: Incomplete, fileids: Incomplete, wrap_etree: bool = False
    ) -> None: ...
    def lemmas(self, vnclass: Incomplete | None = None) -> Incomplete: ...
    def wordnetids(self, vnclass: Incomplete | None = None) -> Incomplete: ...
    def classids(
        self,
        lemma: Incomplete | None = None,
        wordnetid: Incomplete | None = None,
        fileid: Incomplete | None = None,
        classid: Incomplete | None = None,
    ) -> Incomplete: ...
    def vnclass(self, fileid_or_classid: Incomplete) -> Incomplete: ...
    def fileids(self, vnclass_ids: Incomplete | None = None) -> Incomplete: ...
    def frames(self, vnclass: Incomplete) -> Incomplete: ...
    def subclasses(self, vnclass: Incomplete) -> Incomplete: ...
    def themroles(self, vnclass: Incomplete) -> Incomplete: ...
    def longid(self, shortid: Incomplete) -> Incomplete: ...
    def shortid(self, longid: Incomplete) -> Incomplete: ...
    def pprint(self, vnclass: Incomplete) -> Incomplete: ...
    def pprint_subclasses(
        self, vnclass: Incomplete, indent: str = ""
    ) -> Incomplete: ...
    def pprint_members(
        self, vnclass: Incomplete, indent: str = ""
    ) -> Incomplete: ...
    def pprint_themroles(
        self, vnclass: Incomplete, indent: str = ""
    ) -> Incomplete: ...
    def pprint_frames(
        self, vnclass: Incomplete, indent: str = ""
    ) -> Incomplete: ...
