from collections.abc import Generator

from _typeshed import Incomplete

from nltk.internals import find_binary as find_binary
from nltk.tree import Tree as Tree

class DependencyGraph:
    nodes: Incomplete
    root: Incomplete
    def __init__(
        self,
        tree_str: Incomplete | None = None,
        cell_extractor: Incomplete | None = None,
        zero_based: bool = False,
        cell_separator: Incomplete | None = None,
        top_relation_label: str = "ROOT",
    ) -> None: ...
    def remove_by_address(self, address: Incomplete) -> None: ...
    def redirect_arcs(
        self, originals: Incomplete, redirect: Incomplete
    ) -> None: ...
    def add_arc(
        self, head_address: Incomplete, mod_address: Incomplete
    ) -> None: ...
    def connect_graph(self) -> None: ...
    def get_by_address(self, node_address: Incomplete) -> Incomplete: ...
    def contains_address(self, node_address: Incomplete) -> Incomplete: ...
    def to_dot(self) -> Incomplete: ...
    @staticmethod
    def load(
        filename: Incomplete,
        zero_based: bool = False,
        cell_separator: Incomplete | None = None,
        top_relation_label: str = "ROOT",
    ) -> Incomplete: ...
    def left_children(self, node_index: Incomplete) -> Incomplete: ...
    def right_children(self, node_index: Incomplete) -> Incomplete: ...
    def add_node(self, node: Incomplete) -> None: ...
    def tree(self) -> Incomplete: ...
    def triples(
        self, node: Incomplete | None = None
    ) -> Generator[Incomplete, Incomplete, None]: ...
    def contains_cycle(self) -> Incomplete: ...
    def get_cycle_path(
        self, curr_node: Incomplete, goal_node_index: Incomplete
    ) -> Incomplete: ...
    def to_conll(self, style: Incomplete) -> Incomplete: ...
    nx_labels: Incomplete
    def nx_graph(self) -> Incomplete: ...

def dot2img(dot_string: Incomplete, t: str = "svg") -> Incomplete: ...

class DependencyGraphError(Exception): ...

def demo() -> None: ...
def malt_demo(nx: bool = False) -> None: ...
def conll_demo() -> None: ...
def conll_file_demo() -> None: ...
def cycle_finding_demo() -> None: ...

treebank_data: str
conll_data1: str
conll_data2: str
