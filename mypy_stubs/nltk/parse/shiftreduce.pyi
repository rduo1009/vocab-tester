from collections.abc import Generator

from _typeshed import Incomplete

from nltk.grammar import Nonterminal as Nonterminal
from nltk.parse.api import ParserI as ParserI
from nltk.tree import Tree as Tree

class ShiftReduceParser(ParserI):
    def __init__(self, grammar: Incomplete, trace: int = 0) -> None: ...
    def grammar(self) -> Incomplete: ...
    def parse(
        self, tokens: Incomplete
    ) -> Generator[Incomplete, None, None]: ...
    def trace(self, trace: int = 2) -> None: ...

class SteppingShiftReduceParser(ShiftReduceParser):
    def __init__(self, grammar: Incomplete, trace: int = 0) -> None: ...
    def parse(self, tokens: Incomplete) -> Incomplete: ...
    def stack(self) -> Incomplete: ...
    def remaining_text(self) -> Incomplete: ...
    def initialize(self, tokens: Incomplete) -> None: ...
    def step(self) -> Incomplete: ...
    def shift(self) -> Incomplete: ...
    def reduce(self, production: Incomplete | None = None) -> Incomplete: ...
    def undo(self) -> Incomplete: ...
    def reducible_productions(self) -> Incomplete: ...
    def parses(self) -> Generator[Incomplete, None, None]: ...
    def set_grammar(self, grammar: Incomplete) -> None: ...

def demo() -> None: ...
