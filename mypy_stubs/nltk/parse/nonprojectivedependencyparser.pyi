from collections.abc import Generator

from _typeshed import Incomplete

from nltk.parse.dependencygraph import DependencyGraph as DependencyGraph

logger: Incomplete

class DependencyScorerI:
    def __init__(self) -> None: ...
    def train(self, graphs: Incomplete) -> None: ...
    def score(self, graph: Incomplete) -> None: ...

class NaiveBayesDependencyScorer(DependencyScorerI):
    def __init__(self) -> None: ...
    classifier: Incomplete
    def train(self, graphs: Incomplete) -> None: ...
    def score(self, graph: Incomplete) -> Incomplete: ...

class DemoScorer(DependencyScorerI):
    def train(self, graphs: Incomplete) -> None: ...
    def score(self, graph: Incomplete) -> Incomplete: ...

class ProbabilisticNonprojectiveParser:
    def __init__(self) -> None: ...
    def train(
        self, graphs: Incomplete, dependency_scorer: Incomplete
    ) -> None: ...
    scores: Incomplete
    def initialize_edge_scores(self, graph: Incomplete) -> None: ...
    def collapse_nodes(
        self,
        new_node: Incomplete,
        cycle_path: Incomplete,
        g_graph: Incomplete,
        b_graph: Incomplete,
        c_graph: Incomplete,
    ) -> None: ...
    def update_edge_scores(
        self, new_node: Incomplete, cycle_path: Incomplete
    ) -> None: ...
    def compute_original_indexes(
        self, new_indexes: Incomplete
    ) -> Incomplete: ...
    def compute_max_subtract_score(
        self, column_index: Incomplete, cycle_indexes: Incomplete
    ) -> Incomplete: ...
    def best_incoming_arc(self, node_inde: Incomplete) -> Incomplete: ...
    def original_best_arc(self, node_inde: Incomplete) -> Incomplete: ...
    inner_nodes: Incomplete
    def parse(
        self, tokens: Incomplete, tags: Incomplete
    ) -> Generator[Incomplete, None, None]: ...

class NonprojectiveDependencyParser:
    def __init__(self, dependency_grammar: Incomplete) -> None: ...
    def parse(
        self, tokens: Incomplete
    ) -> Generator[Incomplete, None, None]: ...

def demo() -> None: ...
def hall_demo() -> None: ...
def nonprojective_conll_parse_demo() -> None: ...
def rule_based_demo() -> None: ...
