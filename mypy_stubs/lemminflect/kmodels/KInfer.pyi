# Auto-generated by monkeytype

from abc import ABC, abstractmethod
from typing import Any, Dict, List, Tuple, Union

from numpy import (
    int64,
    ndarray,
)

def applyActivation(x: ndarray[Any, Any], atype: str) -> ndarray[Any, Any]: ...
def flatten(x: ndarray[Any, Any]) -> ndarray[Any, Any]: ...
def getKInferInstance(kitype: str, model_fn: str) -> KInferWithNumpy: ...
def relu(x: ndarray[Any, Any]) -> ndarray[Any, Any]: ...
def softmax(x: ndarray[Any, Any], axis: int = ...) -> ndarray[Any, Any]: ...

class KInfer(ABC):
    def __init__(self) -> None: ...
    def _loadModelContainer(
        self, fn: str
    ) -> Tuple[
        Dict[str, Union[str, List[Any], Dict[str, Any]]],
        List[ndarray[Any, Any]],
    ]: ...
    def _netOutToValue(self, vec: ndarray[Any, Any]) -> Tuple[int64, str]: ...
    def getOutputEnum(self) -> List[str]: ...
    @abstractmethod
    def run(self, in_vec: ndarray[Any, Any]): ...

class KInferWithKeras:
    def __init__(self, fn: str): ...
    def _load(self, fn: str): ...  # type: ignore
    def run(self, in_vec: ndarray[Any, Any]): ...

class KInferWithNumpy:
    def __init__(self, fn: str): ...
    def run(self, in_vec: ndarray[Any, Any]) -> Tuple[int64, str]: ...
