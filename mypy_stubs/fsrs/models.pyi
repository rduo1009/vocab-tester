# Auto-generated by stubgen

from dataclasses import dataclass
from datetime import datetime
from enum import IntEnum
from typing import Any

class State(IntEnum):
    New = 0
    Learning = 1
    Review = 2
    Relearning = 3

class Rating(IntEnum):
    Again = 1
    Hard = 2
    Good = 3
    Easy = 4

class ReviewLog:
    rating: int
    scheduled_days: int
    elapsed_days: int
    review: datetime
    state: int
    def __init__(
        self,
        rating: int,
        scheduled_days: int,
        elapsed_days: int,
        review: datetime,
        state: int,
    ) -> None: ...
    def to_dict(self) -> dict[str, Any]: ...
    @staticmethod
    def from_dict(source_dict: dict[str, Any]) -> ReviewLog: ...

class Card:
    due: datetime
    stability: float
    difficulty: float
    elapsed_days: int
    scheduled_days: int
    reps: int
    lapses: int
    state: State
    last_review: datetime
    def __init__(
        self,
        due: datetime,
        stability: int,
        difficulty: int,
        elapsed_days: int,
        scheduled_days: int,
        reps: int,
        lapses: int,
        state: State,
        last_review: datetime,
    ) -> None: ...
    def to_dict(self) -> dict[str, Any]: ...
    @staticmethod
    def from_dict(source_dict: dict[str, Any]) -> Card: ...
    def get_retrievability(self, now: datetime) -> float | None: ...

@dataclass
class SchedulingInfo:
    card: Card
    review_log: ReviewLog
    def __init__(self, card: Card, review_log: ReviewLog) -> None: ...

class SchedulingCards:
    again: Card
    hard: Card
    good: Card
    easy: Card
    def __init__(self, card: Card) -> None: ...
    def update_state(self, state: State) -> None: ...
    def schedule(
        self,
        now: datetime,
        hard_interval: int,
        good_interval: int,
        easy_interval: int,
    ) -> None: ...
    def record_log(
        self, card: Card, now: datetime
    ) -> dict[int, SchedulingInfo]: ...

class Parameters:
    request_retention: float
    maximum_interval: int
    w: tuple[float, ...]
    def __init__(
        self,
        w: tuple[float, ...] | None = None,
        request_retention: float | None = None,
        maximum_interval: int | None = None,
    ) -> None: ...
