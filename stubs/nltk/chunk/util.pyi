from _typeshed import Incomplete

from nltk.tag.mapping import map_tag as map_tag
from nltk.tag.util import str2tuple as str2tuple
from nltk.tree import Tree as Tree

def accuracy(chunker: Incomplete, gold: Incomplete) -> Incomplete: ...

class ChunkScore:
    def __init__(self, **kwargs: Incomplete) -> None: ...
    def score(self, correct: Incomplete, guessed: Incomplete) -> None: ...
    def accuracy(self) -> Incomplete: ...
    def precision(self) -> Incomplete: ...
    def recall(self) -> Incomplete: ...
    def f_measure(self, alpha: float = 0.5) -> Incomplete: ...
    def missed(self) -> Incomplete: ...
    def incorrect(self) -> Incomplete: ...
    def correct(self) -> Incomplete: ...
    def guessed(self) -> Incomplete: ...
    def __len__(self) -> int: ...

def tagstr2tree(
    s: Incomplete,
    chunk_label: str = "NP",
    root_label: str = "S",
    sep: str = "/",
    source_tagset: Incomplete | None = None,
    target_tagset: Incomplete | None = None,
) -> Incomplete: ...
def conllstr2tree(
    s: Incomplete,
    chunk_types: Incomplete = ("NP", "PP", "VP"),
    root_label: str = "S",
) -> Incomplete: ...
def tree2conlltags(t: Incomplete) -> Incomplete: ...
def conlltags2tree(
    sentence: Incomplete,
    chunk_types: Incomplete = ("NP", "PP", "VP"),
    root_label: str = "S",
    strict: bool = False,
) -> Incomplete: ...
def tree2conllstr(t: Incomplete) -> Incomplete: ...
def ieerstr2tree(
    s: Incomplete,
    chunk_types: Incomplete = [
        "LOCATION",
        "ORGANIZATION",
        "PERSON",
        "DURATION",
        "DATE",
        "CARDINAL",
        "PERCENT",
        "MONEY",
        "MEASURE",
    ],
    root_label: str = "S",
) -> Incomplete: ...
def demo() -> None: ...
