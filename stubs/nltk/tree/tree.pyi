from collections.abc import Generator
from typing import Any

from _typeshed import Incomplete

__all__ = ["Tree"]

class Tree(list):  # type: ignore[type-arg]
    def __init__(
        self, node: Incomplete, children: Incomplete | None = None
    ) -> None: ...
    def __eq__(self, other: Incomplete) -> Incomplete: ...
    def __lt__(self, other: Incomplete) -> Incomplete: ...
    __ne__: Incomplete
    __gt__: Incomplete
    __le__: Incomplete
    __ge__: Incomplete
    def __mul__(self, v: Incomplete) -> list[Any]: ...
    def __rmul__(self, v: Incomplete) -> list[Any]: ...
    def __add__(self, v: Incomplete) -> None: ...
    def __radd__(self, v: Incomplete) -> None: ...
    def __getitem__(self, index: Incomplete) -> Incomplete: ...
    def __setitem__(self, index: Incomplete, value: Incomplete) -> None: ...
    def __delitem__(self, index: Incomplete) -> None: ...
    node: Incomplete
    def label(self) -> Incomplete: ...
    def set_label(self, label: Incomplete) -> None: ...
    def leaves(self) -> Incomplete: ...
    def flatten(self) -> Incomplete: ...
    def height(self) -> Incomplete: ...
    def treepositions(self, order: str = "preorder") -> Incomplete: ...
    def subtrees(
        self, filter: Incomplete | None = None
    ) -> Generator[Incomplete, Incomplete, None]: ...
    def productions(self) -> Incomplete: ...
    def pos(self) -> Incomplete: ...
    def leaf_treeposition(self, index: Incomplete) -> Incomplete: ...
    def treeposition_spanning_leaves(
        self, start: Incomplete, end: Incomplete
    ) -> Incomplete: ...
    def chomsky_normal_form(
        self,
        factor: str = "right",
        horzMarkov: Incomplete | None = None,
        vertMarkov: int = 0,
        childChar: str = "|",
        parentChar: str = "^",
    ) -> None: ...
    def un_chomsky_normal_form(
        self,
        expandUnary: bool = True,
        childChar: str = "|",
        parentChar: str = "^",
        unaryChar: str = "+",
    ) -> None: ...
    def collapse_unary(
        self,
        collapsePOS: bool = False,
        collapseRoot: bool = False,
        joinChar: str = "+",
    ) -> None: ...
    @classmethod
    def convert(cls: Incomplete, tree: Incomplete) -> Incomplete: ...
    def __copy__(self) -> Incomplete: ...
    def __deepcopy__(self, memo: Incomplete) -> Incomplete: ...
    def copy(self, deep: bool = False) -> Incomplete: ...
    def freeze(self, leaf_freezer: Incomplete | None = None) -> Incomplete: ...
    @classmethod
    def fromstring(
        cls: Incomplete,
        s: Incomplete,
        brackets: str = "()",
        read_node: Incomplete | None = None,
        read_leaf: Incomplete | None = None,
        node_pattern: Incomplete | None = None,
        leaf_pattern: Incomplete | None = None,
        remove_empty_top_bracketing: bool = False,
    ) -> Incomplete: ...
    @classmethod
    def fromlist(cls: Incomplete, l: Incomplete) -> Incomplete: ...
    def draw(self) -> None: ...
    def pretty_print(
        self,
        sentence: Incomplete | None = None,
        highlight: Incomplete = (),
        stream: Incomplete | None = None,
        **kwargs: Incomplete,
    ) -> None: ...
    def pprint(self, **kwargs: Incomplete) -> None: ...
    def pformat(
        self,
        margin: int = 70,
        indent: int = 0,
        nodesep: str = "",
        parens: str = "()",
        quotes: bool = False,
    ) -> Incomplete: ...
    def pformat_latex_qtree(self) -> Incomplete: ...
