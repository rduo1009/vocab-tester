import threading

from _typeshed import Incomplete

from nltk.corpus import alpino as alpino
from nltk.corpus import brown as brown
from nltk.corpus import cess_cat as cess_cat
from nltk.corpus import cess_esp as cess_esp
from nltk.corpus import floresta as floresta
from nltk.corpus import indian as indian
from nltk.corpus import mac_morpho as mac_morpho
from nltk.corpus import nps_chat as nps_chat
from nltk.corpus import sinica_treebank as sinica_treebank
from nltk.corpus import treebank as treebank
from nltk.draw.util import ShowText as ShowText
from nltk.util import in_idle as in_idle

WORD_OR_TAG: str
BOUNDARY: str
CORPUS_LOADED_EVENT: str
SEARCH_TERMINATED_EVENT: str
SEARCH_ERROR_EVENT: str
ERROR_LOADING_CORPUS_EVENT: str
POLL_INTERVAL: int

class ConcordanceSearchView:
    queue: Incomplete
    model: Incomplete
    top: Incomplete
    after: Incomplete
    def __init__(self) -> None: ...
    def set_result_size(self, **kwargs: Incomplete) -> None: ...
    def set_cntx_af_len(self, **kwargs: Incomplete) -> None: ...
    def set_cntx_bf_len(self, **kwargs: Incomplete) -> None: ...
    def search_enter_keypress_handler(self, *event: Incomplete) -> None: ...
    def previous(self) -> None: ...
    def __next__(self) -> None: ...
    def about(self, *e: Incomplete) -> None: ...
    def handle_error_loading_corpus(self, event: Incomplete) -> None: ...
    def handle_corpus_loaded(self, event: Incomplete) -> None: ...
    current_page: Incomplete
    def handle_search_terminated(self, event: Incomplete) -> None: ...
    def handle_search_error(self, event: Incomplete) -> None: ...
    def corpus_selected(self, *args: Incomplete) -> None: ...
    def load_corpus(self, selection: Incomplete) -> None: ...
    def search(self) -> None: ...
    def write_results(self, results: Incomplete) -> None: ...
    def words_and_labels(
        self, sentence: Incomplete, pos1: Incomplete, pos2: Incomplete
    ) -> Incomplete: ...
    def pad(
        self, sent: Incomplete, hstart: Incomplete, hend: Incomplete
    ) -> Incomplete: ...
    def destroy(self, *e: Incomplete) -> None: ...
    def clear_all(self) -> None: ...
    def clear_results_box(self) -> None: ...
    def freeze_editable(self) -> None: ...
    def unfreeze_editable(self) -> None: ...
    def set_paging_button_states(self) -> None: ...
    def fire_event(self, event: Incomplete) -> None: ...
    def mainloop(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...

class ConcordanceSearchModel:
    queue: Incomplete
    CORPORA: Incomplete
    DEFAULT_CORPUS: Incomplete
    selected_corpus: Incomplete
    result_count: Incomplete
    last_sent_searched: int
    def __init__(self, queue: Incomplete) -> None: ...
    def non_default_corpora(self) -> Incomplete: ...
    tagged_sents: Incomplete
    def load_corpus(self, name: Incomplete) -> None: ...
    query: Incomplete
    last_requested_page: Incomplete
    def search(self, query: Incomplete, page: Incomplete) -> None: ...
    def next(self, page: Incomplete) -> None: ...
    def prev(self, page: Incomplete) -> None: ...
    results: Incomplete
    last_page: Incomplete
    def reset_results(self) -> None: ...
    def reset_query(self) -> None: ...
    def set_results(self, page: Incomplete, resultset: Incomplete) -> None: ...
    def get_results(self) -> Incomplete: ...
    def has_more_pages(self, page: Incomplete) -> Incomplete: ...
    class LoadCorpus(threading.Thread):
        def __init__(self, name: Incomplete, model: Incomplete) -> None: ...
        def run(self) -> None: ...

    class SearchCorpus(threading.Thread):
        def __init__(
            self, model: Incomplete, page: Incomplete, count: Incomplete
        ) -> None: ...
        def run(self) -> None: ...
        def processed_query(self) -> Incomplete: ...

def app() -> None: ...
