from abc import ABCMeta
from tkinter import Menubutton

from _typeshed import Incomplete

from nltk.util import in_idle as in_idle

class CanvasWidget(metaclass=ABCMeta):
    def __init__(
        self,
        canvas: Incomplete,
        parent: Incomplete | None = None,
        **attribs: Incomplete,
    ) -> None: ...
    def bbox(self) -> Incomplete: ...
    def width(self) -> Incomplete: ...
    def height(self) -> Incomplete: ...
    def parent(self) -> Incomplete: ...
    def child_widgets(self) -> Incomplete: ...
    def canvas(self) -> Incomplete: ...
    def move(self, dx: Incomplete, dy: Incomplete) -> None: ...
    def moveto(
        self, x: Incomplete, y: Incomplete, anchor: str = "NW"
    ) -> None: ...
    def destroy(self) -> None: ...
    def update(self, child: Incomplete) -> None: ...
    def manage(self) -> None: ...
    def tags(self) -> Incomplete: ...
    def __setitem__(self, attr: Incomplete, value: Incomplete) -> None: ...
    def __getitem__(self, attr: Incomplete) -> Incomplete: ...
    def hide(self) -> None: ...
    def show(self) -> None: ...
    def hidden(self) -> Incomplete: ...
    def bind_click(self, callback: Incomplete, button: int = 1) -> None: ...
    def bind_drag(self, callback: Incomplete) -> None: ...
    def unbind_click(self, button: int = 1) -> None: ...
    def unbind_drag(self) -> None: ...

class TextWidget(CanvasWidget):
    def __init__(
        self, canvas: Incomplete, text: Incomplete, **attribs: Incomplete
    ) -> None: ...
    def __setitem__(self, attr: Incomplete, value: Incomplete) -> None: ...
    def __getitem__(self, attr: Incomplete) -> Incomplete: ...
    def text(self) -> Incomplete: ...
    def set_text(self, text: Incomplete) -> None: ...

class SymbolWidget(TextWidget):
    SYMBOLS: Incomplete
    def __init__(
        self, canvas: Incomplete, symbol: Incomplete, **attribs: Incomplete
    ) -> None: ...
    def symbol(self) -> Incomplete: ...
    def set_symbol(self, symbol: Incomplete) -> None: ...
    @staticmethod
    def symbolsheet(size: int = 20) -> None: ...

class AbstractContainerWidget(CanvasWidget):
    def __init__(
        self, canvas: Incomplete, child: Incomplete, **attribs: Incomplete
    ) -> None: ...
    def child(self) -> Incomplete: ...
    def set_child(self, child: Incomplete) -> None: ...

class BoxWidget(AbstractContainerWidget):
    def __init__(
        self, canvas: Incomplete, child: Incomplete, **attribs: Incomplete
    ) -> None: ...
    def __setitem__(self, attr: Incomplete, value: Incomplete) -> None: ...
    def __getitem__(self, attr: Incomplete) -> Incomplete: ...

class OvalWidget(AbstractContainerWidget):
    def __init__(
        self, canvas: Incomplete, child: Incomplete, **attribs: Incomplete
    ) -> None: ...
    def __setitem__(self, attr: Incomplete, value: Incomplete) -> None: ...
    def __getitem__(self, attr: Incomplete) -> Incomplete: ...
    RATIO: float

class ParenWidget(AbstractContainerWidget):
    def __init__(
        self, canvas: Incomplete, child: Incomplete, **attribs: Incomplete
    ) -> None: ...
    def __setitem__(self, attr: Incomplete, value: Incomplete) -> None: ...
    def __getitem__(self, attr: Incomplete) -> Incomplete: ...

class BracketWidget(AbstractContainerWidget):
    def __init__(
        self, canvas: Incomplete, child: Incomplete, **attribs: Incomplete
    ) -> None: ...
    def __setitem__(self, attr: Incomplete, value: Incomplete) -> None: ...
    def __getitem__(self, attr: Incomplete) -> Incomplete: ...

class SequenceWidget(CanvasWidget):
    def __init__(
        self, canvas: Incomplete, *children: Incomplete, **attribs: Incomplete
    ) -> None: ...
    def __setitem__(self, attr: Incomplete, value: Incomplete) -> None: ...
    def __getitem__(self, attr: Incomplete) -> Incomplete: ...
    children: Incomplete
    def replace_child(
        self, oldchild: Incomplete, newchild: Incomplete
    ) -> None: ...
    def remove_child(self, child: Incomplete) -> None: ...
    def insert_child(self, index: Incomplete, child: Incomplete) -> None: ...

class StackWidget(CanvasWidget):
    def __init__(
        self, canvas: Incomplete, *children: Incomplete, **attribs: Incomplete
    ) -> None: ...
    def __setitem__(self, attr: Incomplete, value: Incomplete) -> None: ...
    def __getitem__(self, attr: Incomplete) -> Incomplete: ...
    children: Incomplete
    def replace_child(
        self, oldchild: Incomplete, newchild: Incomplete
    ) -> None: ...
    def remove_child(self, child: Incomplete) -> None: ...
    def insert_child(self, index: Incomplete, child: Incomplete) -> None: ...

class SpaceWidget(CanvasWidget):
    def __init__(
        self,
        canvas: Incomplete,
        width: Incomplete,
        height: Incomplete,
        **attribs: Incomplete,
    ) -> None: ...
    def set_width(self, width: Incomplete) -> None: ...
    def set_height(self, height: Incomplete) -> None: ...

class ScrollWatcherWidget(CanvasWidget):
    def __init__(
        self, canvas: Incomplete, *children: Incomplete, **attribs: Incomplete
    ) -> None: ...
    def add_child(self, canvaswidget: Incomplete) -> None: ...
    def remove_child(self, canvaswidget: Incomplete) -> None: ...

class CanvasFrame:
    def __init__(
        self, parent: Incomplete | None = None, **kw: Incomplete
    ) -> None: ...
    def print_to_file(self, filename: Incomplete | None = None) -> None: ...
    def scrollregion(self) -> Incomplete: ...
    def canvas(self) -> Incomplete: ...
    def add_widget(
        self,
        canvaswidget: Incomplete,
        x: Incomplete | None = None,
        y: Incomplete | None = None,
    ) -> None: ...
    def destroy_widget(self, canvaswidget: Incomplete) -> None: ...
    def remove_widget(self, canvaswidget: Incomplete) -> None: ...
    def pack(self, cnf: Incomplete = {}, **kw: Incomplete) -> None: ...
    def destroy(self, *e: Incomplete) -> None: ...
    def mainloop(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...

class ShowText:
    def __init__(
        self,
        root: Incomplete,
        title: Incomplete,
        text: Incomplete,
        width: Incomplete | None = None,
        height: Incomplete | None = None,
        **textbox_options: Incomplete,
    ) -> None: ...
    def find_dimentions(
        self, text: Incomplete, width: Incomplete, height: Incomplete
    ) -> Incomplete: ...
    def destroy(self, *e: Incomplete) -> None: ...
    def mainloop(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...

class EntryDialog:
    def __init__(
        self,
        parent: Incomplete,
        original_text: str = "",
        instructions: str = "",
        set_callback: Incomplete | None = None,
        title: Incomplete | None = None,
    ) -> None: ...

class ColorizedList:
    def __init__(
        self, parent: Incomplete, items: Incomplete = [], **options: Incomplete
    ) -> None: ...
    def get(self, index: Incomplete | None = None) -> Incomplete: ...
    def set(self, items: Incomplete) -> None: ...
    def unmark(self, item: Incomplete | None = None) -> None: ...
    def mark(self, item: Incomplete) -> None: ...
    def markonly(self, item: Incomplete) -> None: ...
    def view(self, item: Incomplete) -> None: ...
    def add_callback(self, event: Incomplete, func: Incomplete) -> None: ...
    def remove_callback(
        self, event: Incomplete, func: Incomplete | None = None
    ) -> None: ...
    def pack(self, cnf: Incomplete = {}, **kw: Incomplete) -> None: ...
    def grid(self, cnf: Incomplete = {}, **kw: Incomplete) -> None: ...
    def focus(self) -> None: ...

class MutableOptionMenu(Menubutton):
    widgetName: str
    menuname: Incomplete
    def __init__(
        self, master: Incomplete, values: Incomplete, **options: Incomplete
    ) -> None: ...
    def add(self, value: Incomplete) -> None: ...
    def set(self, value: Incomplete) -> None: ...
    def remove(self, value: Incomplete) -> None: ...
    def __getitem__(self, name: Incomplete) -> Incomplete: ...
    def destroy(self) -> None: ...

def demo() -> None: ...
