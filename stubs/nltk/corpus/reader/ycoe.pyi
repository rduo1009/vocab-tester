from _typeshed import Incomplete

from nltk.corpus.reader.api import *
from nltk.corpus.reader.bracket_parse import (
    BracketParseCorpusReader as BracketParseCorpusReader,
)
from nltk.corpus.reader.tagged import TaggedCorpusReader as TaggedCorpusReader
from nltk.corpus.reader.util import *
from nltk.tokenize import RegexpTokenizer as RegexpTokenizer

class YCOECorpusReader(CorpusReader):
    def __init__(self, root: Incomplete, encoding: str = "utf8") -> None: ...
    def documents(self, fileids: Incomplete | None = None) -> Incomplete: ...
    def fileids(self, documents: Incomplete | None = None) -> Incomplete: ...
    def words(self, documents: Incomplete | None = None) -> Incomplete: ...
    def sents(self, documents: Incomplete | None = None) -> Incomplete: ...
    def paras(self, documents: Incomplete | None = None) -> Incomplete: ...
    def tagged_words(
        self, documents: Incomplete | None = None
    ) -> Incomplete: ...
    def tagged_sents(
        self, documents: Incomplete | None = None
    ) -> Incomplete: ...
    def tagged_paras(
        self, documents: Incomplete | None = None
    ) -> Incomplete: ...
    def parsed_sents(
        self, documents: Incomplete | None = None
    ) -> Incomplete: ...

class YCOEParseCorpusReader(BracketParseCorpusReader): ...

class YCOETaggedCorpusReader(TaggedCorpusReader):
    def __init__(
        self, root: Incomplete, items: Incomplete, encoding: str = "utf8"
    ) -> None: ...

documents: Incomplete
