from _typeshed import Incomplete

from nltk.internals import deprecated as deprecated
from nltk.metrics.distance import binary_distance as binary_distance
from nltk.probability import (
    ConditionalFreqDist as ConditionalFreqDist,
)
from nltk.probability import (
    FreqDist as FreqDist,
)

log: Incomplete

class AnnotationTask:
    distance: Incomplete
    I: Incomplete
    K: Incomplete
    C: Incomplete
    data: Incomplete
    def __init__(
        self, data: Incomplete | None = None, distance: Incomplete = ...
    ) -> None: ...
    def load_array(self, array: Incomplete) -> None: ...
    def agr(
        self,
        cA: Incomplete,
        cB: Incomplete,
        i: Incomplete,
        data: Incomplete | None = None,
    ) -> Incomplete: ...
    def Nk(self, k: Incomplete) -> Incomplete: ...
    def Nik(self, i: Incomplete, k: Incomplete) -> Incomplete: ...
    def Nck(self, c: Incomplete, k: Incomplete) -> Incomplete: ...
    def N(
        self,
        k: Incomplete | None = None,
        i: Incomplete | None = None,
        c: Incomplete | None = None,
    ) -> Incomplete: ...
    def Ao(self, cA: Incomplete, cB: Incomplete) -> Incomplete: ...
    def avg_Ao(self) -> Incomplete: ...
    def Do_Kw_pairwise(
        self, cA: Incomplete, cB: Incomplete, max_distance: float = 1.0
    ) -> Incomplete: ...
    def Do_Kw(self, max_distance: float = 1.0) -> Incomplete: ...
    def S(self) -> Incomplete: ...
    def pi(self) -> Incomplete: ...
    def Ae_kappa(self, cA: Incomplete, cB: Incomplete) -> Incomplete: ...
    def kappa_pairwise(self, cA: Incomplete, cB: Incomplete) -> Incomplete: ...
    def kappa(self) -> Incomplete: ...
    def multi_kappa(self) -> Incomplete: ...
    def Disagreement(self, label_freqs: Incomplete) -> Incomplete: ...
    def alpha(self) -> Incomplete: ...
    def weighted_kappa_pairwise(
        self, cA: Incomplete, cB: Incomplete, max_distance: float = 1.0
    ) -> Incomplete: ...
    def weighted_kappa(self, max_distance: float = 1.0) -> Incomplete: ...
