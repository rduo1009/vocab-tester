from _typeshed import Incomplete

from nltk.classify.api import ClassifierI as ClassifierI
from nltk.internals import config_java as config_java
from nltk.internals import java as java
from nltk.probability import DictionaryProbDist as DictionaryProbDist

def config_weka(classpath: Incomplete | None = None) -> None: ...

class WekaClassifier(ClassifierI):
    def __init__(
        self, formatter: Incomplete, model_filename: Incomplete
    ) -> None: ...
    def prob_classify_many(self, featuresets: Incomplete) -> Incomplete: ...
    def classify_many(self, featuresets: Incomplete) -> Incomplete: ...
    def parse_weka_distribution(self, s: Incomplete) -> Incomplete: ...
    def parse_weka_output(self, lines: Incomplete) -> Incomplete: ...
    @classmethod
    def train(
        cls: Incomplete,
        model_filename: Incomplete,
        featuresets: Incomplete,
        classifier: str = "naivebayes",
        options: Incomplete = [],
        quiet: bool = True,
    ) -> Incomplete: ...

class ARFF_Formatter:
    def __init__(self, labels: Incomplete, features: Incomplete) -> None: ...
    def format(self, tokens: Incomplete) -> Incomplete: ...
    def labels(self) -> Incomplete: ...
    def write(self, outfile: Incomplete, tokens: Incomplete) -> None: ...
    @staticmethod
    def from_train(tokens: Incomplete) -> Incomplete: ...
    def header_section(self) -> Incomplete: ...
    def data_section(
        self, tokens: Incomplete, labeled: Incomplete | None = None
    ) -> Incomplete: ...
