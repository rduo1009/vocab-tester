from _typeshed import Incomplete

from nltk.internals import Counter as Counter
from nltk.sem.logic import APP as APP
from nltk.sem.logic import LogicParser as LogicParser

class Tokens:
    OPEN: str
    CLOSE: str
    IMP: str
    PUNCT: Incomplete
    TOKENS: Incomplete

class LinearLogicParser(LogicParser):
    operator_precedence: Incomplete
    def __init__(self) -> None: ...
    def get_all_symbols(self) -> Incomplete: ...
    def handle(self, tok: Incomplete, context: Incomplete) -> Incomplete: ...
    def get_BooleanExpression_factory(self, tok: Incomplete) -> Incomplete: ...
    def make_BooleanExpression(
        self, factory: Incomplete, first: Incomplete, second: Incomplete
    ) -> Incomplete: ...
    def attempt_ApplicationExpression(
        self, expression: Incomplete, context: Incomplete
    ) -> Incomplete: ...
    def make_VariableExpression(self, name: Incomplete) -> Incomplete: ...

class Expression:
    @classmethod
    def fromstring(cls: Incomplete, s: Incomplete) -> Incomplete: ...
    def applyto(
        self, other: Incomplete, other_indices: Incomplete | None = None
    ) -> Incomplete: ...
    def __call__(self, other: Incomplete) -> Incomplete: ...

class AtomicExpression(Expression):
    name: Incomplete
    dependencies: Incomplete
    def __init__(
        self, name: Incomplete, dependencies: Incomplete | None = None
    ) -> None: ...
    def simplify(self, bindings: Incomplete | None = None) -> Incomplete: ...
    def compile_pos(
        self, index_counter: Incomplete, glueFormulaFactory: Incomplete
    ) -> Incomplete: ...
    def compile_neg(
        self, index_counter: Incomplete, glueFormulaFactory: Incomplete
    ) -> Incomplete: ...
    def initialize_labels(self, fstruct: Incomplete) -> None: ...
    def __eq__(self, other: Incomplete) -> Incomplete: ...
    def __ne__(self, other: Incomplete) -> Incomplete: ...
    def __hash__(self) -> Incomplete: ...

class ConstantExpression(AtomicExpression):
    def unify(self, other: Incomplete, bindings: Incomplete) -> Incomplete: ...

class VariableExpression(AtomicExpression):
    def unify(self, other: Incomplete, bindings: Incomplete) -> Incomplete: ...

class ImpExpression(Expression):
    antecedent: Incomplete
    consequent: Incomplete
    def __init__(
        self, antecedent: Incomplete, consequent: Incomplete
    ) -> None: ...
    def simplify(self, bindings: Incomplete | None = None) -> Incomplete: ...
    def unify(self, other: Incomplete, bindings: Incomplete) -> Incomplete: ...
    def compile_pos(
        self, index_counter: Incomplete, glueFormulaFactory: Incomplete
    ) -> Incomplete: ...
    def compile_neg(
        self, index_counter: Incomplete, glueFormulaFactory: Incomplete
    ) -> Incomplete: ...
    def initialize_labels(self, fstruct: Incomplete) -> None: ...
    def __eq__(self, other: Incomplete) -> Incomplete: ...
    def __ne__(self, other: Incomplete) -> Incomplete: ...
    def __hash__(self) -> Incomplete: ...

class ApplicationExpression(Expression):
    function: Incomplete
    argument: Incomplete
    bindings: Incomplete
    def __init__(
        self,
        function: Incomplete,
        argument: Incomplete,
        argument_indices: Incomplete | None = None,
    ) -> None: ...
    def simplify(self, bindings: Incomplete | None = None) -> Incomplete: ...
    def __eq__(self, other: Incomplete) -> Incomplete: ...
    def __ne__(self, other: Incomplete) -> Incomplete: ...
    def __hash__(self) -> Incomplete: ...

class BindingDict:
    d: Incomplete
    def __init__(self, bindings: Incomplete | None = None) -> None: ...
    def __setitem__(
        self, variable: Incomplete, binding: Incomplete
    ) -> None: ...
    def __getitem__(self, variable: Incomplete) -> Incomplete: ...
    def __contains__(self, item: Incomplete) -> bool: ...
    def __add__(self, other: Incomplete) -> Incomplete: ...
    def __ne__(self, other: Incomplete) -> Incomplete: ...
    def __eq__(self, other: Incomplete) -> Incomplete: ...

class VariableBindingException(Exception): ...

class UnificationException(Exception):
    def __init__(
        self, a: Incomplete, b: Incomplete, bindings: Incomplete
    ) -> None: ...

class LinearLogicApplicationException(Exception): ...

def demo() -> None: ...
