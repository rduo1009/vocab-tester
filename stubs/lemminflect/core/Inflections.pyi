# Auto-generated by monkeytype

from typing import (
    Dict,
    Optional,
    Tuple,
)

from lemminflect.core.InflectionRules import MorphologyStyleModel

from ..utils.Singleton import _Singleton

# from spacy.tokens.token import Token

class Inflections(_Singleton):
    DICT_UPOS_TYPES: list[str]
    def __init__(self, infl_lu_fn: str = ..., overrides_fn: str = ...): ...
    @staticmethod
    def _extractForm(
        forms: Dict[str, Tuple[str, ...]], tag: str
    ) -> Optional[Tuple[str, ...]]: ...
    def _getInflDict(
        self,
    ) -> Dict[
        str,
        Dict[str, Tuple[str, ...]],
    ]: ...
    def _getInflStyleModel(self) -> MorphologyStyleModel: ...
    def _getOverridesDict(self) -> Dict[str, Dict[str, Tuple[str]]]: ...
    def getAllInflections(
        self, lemma: str, upos: Optional[str] = ...
    ) -> Dict[str, Tuple[str, ...]]: ...
    def getAllInflectionsOOV(
        self, lemma: str, upos: Optional[str]
    ) -> Dict[str, Tuple[str, ...]]: ...
    def getInflection(
        self, lemma: str, tag: str, inflect_oov: bool = ...
    ) -> Tuple[str, ...]: ...
    def setUseInternalLemmatizer(self, TF: bool) -> None: ...
    # def spacyGetInfl(
    #    self,
    #    token: Token,
    #    tag: str,
    #    form_num: int = ...,
    #    inflect_oov: bool = ...,
    #    on_empty_ret_word: bool = ...,
    # ) -> str: ...
    def isUsingInternalLemmatizer(self) -> bool: ...
